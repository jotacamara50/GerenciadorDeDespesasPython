"""
Django settings for expense_manager project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta # Necessário para SIMPLE_JWT
from dotenv import load_dotenv # Importa a função para carregar variáveis de ambiente do .env

load_dotenv() # Carrega as variáveis de ambiente do arquivo .env (para uso local)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# EM PRODUÇÃO: esta chave virá de uma variável de ambiente no servidor.
# Para desenvolvimento local, ele usa o valor de DJANGO_SECRET_KEY do seu .env
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'default-dev-secret-key-please-change-me-in-production')


# SECURITY WARNING: don't run with debug turned on in production!
# Em produção, esta variável de ambiente deve ser 'False'.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() == 'true'

# Hosts permitidos em produção. No servidor, defina DJANGO_ALLOWED_HOSTS='SEU_IP,seu-dominio.com'
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'theme', # Seu app tema do Tailwind
    'tailwind', # Necessário para django-tailwind
    'rest_framework',
    'expenses', # Seu app de despesas
    'drf_spectacular', # Para documentação da API
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'expense_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'expense_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        # As credenciais abaixo são para desenvolvimento local via .env
        # Para produção, elas virão das variáveis de ambiente definidas no servidor
        'NAME': os.environ.get('DB_NAME', 'minhadespesa'),
        'USER': os.environ.get('DB_USER', 'despesa'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'Abc123'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# ** NOVO: Força o Django a gerar URLs com este prefixo para subdiretório **
FORCE_SCRIPT_NAME = '/gerenciador/'

# URLs para autenticação e redirecionamento (muito importantes para o subdiretório)
LOGIN_URL = '/gerenciador/admin/login/' # Exemplo: Redireciona para o login do admin
LOGIN_REDIRECT_URL = '/gerenciador/'   # Redireciona para a home do seu app após login
LOGOUT_REDIRECT_URL = '/gerenciador/'  # Redireciona para a home do seu app após logout


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# ** ALTERADO: STATIC_URL agora inclui o prefixo do subdiretório **
STATIC_URL = '/gerenciador/static/' # Agora, Django gerará /gerenciador/static/...
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Pasta para onde os arquivos estáticos serão coletados em produção
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), # Pasta de arquivos estáticos na raiz do projeto
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema', # Para documentação da API
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    # EM PRODUÇÃO: esta chave virá de uma variável de ambiente no servidor.
    # Para desenvolvimento, pode usar o valor de SECRET_KEY ou uma chave própria do .env
    'SIGNING_KEY': os.environ.get('JWT_SIGNING_KEY', SECRET_KEY),
    'SIZE_VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# Configuração do Django-Tailwind
TAILWIND_APP = 'theme' # Nome do seu app tema Tailwind
NPM_BIN_PATH = r"C:\Program Files\nodejs\npm.cmd" # Caminho para o executável npm. Ajuste conforme sua instalação!